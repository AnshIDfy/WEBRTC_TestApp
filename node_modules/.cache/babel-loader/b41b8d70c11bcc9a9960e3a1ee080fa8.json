{"ast":null,"code":"var _jsxFileName = \"/home/terbo/janusroom/src/components/Textroom.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Janus from \"./Janus\";\nimport $ from \"jquery\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar server = null; // if (window.location.protocol === \"http:\")\n\nserver = \"ws://\" + window.location.hostname + \":8188/janus\"; // else server = \"https://\" + window.location.hostname + \":8089/janus\";\n\nvar janus = null;\nvar textroom = null;\nvar opaqueId = \"textroomtest-\" + Janus.randomString(12);\nvar myroom = null; // Demo room\n\nvar myusername = null; // var myid: any = null;\n\nvar participants = {};\nvar transactions = {};\nexport const Textroom = props => {\n  _s();\n\n  myroom = props.roomIDS;\n  var todayDate = new Date();\n  const janusDate = todayDate.toString().substring(4, 16);\n  const [data, setData] = useState(\"\");\n\n  const onChangeData = event => {\n    return setData(event.currentTarget.value);\n  };\n\n  const [jsonFinal, setjsonFinal] = useState([]);\n  const participantsJson = [];\n  const [selfID, setselfID] = useState(\"\");\n\n  const start = () => {\n    Janus.init({\n      debug: \"all\",\n      callback: function () {\n        if (!Janus.isWebrtcSupported()) {\n          console.log(\"No WebRTC support... \");\n          return;\n        } // Create session\n\n\n        janus = new Janus({\n          server: server,\n          success: function () {\n            // Attach to TextRoom plugin\n            janus.attach({\n              plugin: \"janus.plugin.textroom\",\n              opaqueId: opaqueId,\n              success: function (pluginHandle) {\n                textroom = pluginHandle;\n                console.log(\"Plugin attached! (\" + textroom.getPlugin() + \", id=\" + textroom.getId() + \")\");\n                console.log(textroom.session.getSessionId());\n                console.log(textroom.session);\n                var body = {\n                  request: \"setup\"\n                };\n                console.debug(\"Sending message:\", body);\n                textroom.send({\n                  message: body\n                }); // Setup the DataChannel\n              },\n              error: function (error) {\n                console.error(\" -- Error attaching plugin...\", error);\n              },\n              iceState: function (state) {\n                console.log(\"ICE state changed to \" + state);\n              },\n              mediaState: function (medium, on) {\n                console.log(\"Janus \" + (on ? \"started\" : \"stopped\") + \" receiving our \" + medium);\n              },\n              webrtcState: function (on) {\n                console.log(\"Janus says our WebRTC PeerConnection is \" + (on ? \"up\" : \"down\") + \" now\");\n              },\n              onmessage: function (msg, jsep) {\n                console.debug(\" ::: Got a message :::\", msg, jsep);\n\n                if (msg[\"error\"]) {}\n\n                if (jsep) {\n                  // Answer\n                  textroom.createAnswer({\n                    jsep: jsep,\n                    media: {\n                      audio: false,\n                      video: false,\n                      data: true\n                    },\n                    // We only use datachannels\n                    success: function (jsep) {\n                      console.debug(\"Got SDP!\", jsep);\n                      var body = {\n                        request: \"ack\"\n                      };\n                      textroom.send({\n                        message: body,\n                        jsep: jsep,\n                        success: () => {\n                          const myid = Janus.randomString(12);\n                          setselfID(myid);\n                          const register = {\n                            textroom: \"join\",\n                            room: myroom,\n                            transaction: Janus.randomString(12),\n                            username: props.name,\n                            history: true,\n                            display: myid\n                          };\n                          textroom.data({\n                            text: JSON.stringify(register),\n                            error: function (reason) {\n                              console.log(reason);\n                            }\n                          });\n                        }\n                      });\n                    },\n                    error: function (error) {\n                      console.error(\"WebRTC error:\", error);\n                    }\n                  });\n                }\n              },\n              ondataopen: function (data) {\n                console.log(\"The DataChannel is available!\"); // Prompt for a display name to join the default room\n              },\n              ondata: function (data) {\n                console.debug(\"We got data from the DataChannel!\", data);\n                var json = JSON.parse(data);\n                const insert = json[\"participants\"];\n                const arrayCheck = Array.isArray(insert);\n\n                if (arrayCheck) {\n                  participantsJson.push(...insert);\n                }\n\n                var filtered = participantsJson.filter(function (el) {\n                  return el.username !== props.name;\n                });\n                setjsonFinal(filtered);\n                var transaction = json[\"transaction\"];\n\n                if (transactions[transaction]) {\n                  // S o m e o n e   w a s  w  a  i t i n g f o r  t h i s\n                  transactions[transaction](json);\n                  delete transactions[transaction];\n                  return;\n                }\n\n                var what = json[\"textroom\"]; //var jsonParticipant = json[\"participants\"];\n                //console.log(jsonParticipant);\n                //  participantsJson.push(...jsonParticipant)\n                // if ( jsonParticipant) {\n                //   setparticipantsJson(jsonParticipant);\n                // }\n\n                if (what === \"message\") {\n                  // Incoming message: public or private?\n                  var msg = json[\"text\"]; // const datee = json[\"date\"];\n\n                  var dt = new Date();\n                  const janusDate = dt.toString().substring(4, 16);\n                  console.log(dt.getMilliseconds());\n                  console.log(typeof janusDate); // console.log(dt.toString().substring(16,25 ))\n\n                  msg = msg.replace(new RegExp(\"<\", \"g\"), \"&lt\");\n                  msg = msg.replace(new RegExp(\">\", \"g\"), \"&gt\");\n                  var from = json[\"from\"];\n                  console.log(json, \"iran\");\n                  var dateString = getDateString(); // var dateString = getDateString(json[\"date\"]);\n\n                  console.log(dateString);\n                  var whisper = json[\"whisper\"];\n                  var sender = participants[from] ? participants[from] : escapeXmlTags(json[\"display\"]);\n                  console.log(sender);\n\n                  if (whisper === true) {\n                    // Private message\n                    $(\"#chatroom\").append('<p style=\"color: purple;\"> <b>[Private Msg :' + from + \"]</b> \" + msg);\n                    $(\"#chatroom\").get(0).scrollTop = $(\"#chatroom\").get(0).scrollHeight;\n                  } else {\n                    // Public message\n                    $(\"#chatroom\").append(\"<p> <b>\" + dateString + \" \" + \"User-\" + from + \": </b> \" + msg);\n                    $(\"#chatroom\").get(0).scrollTop = $(\"#chatroom\").get(0).scrollHeight;\n                  }\n                } else if (what === \"join\") {\n                  //   // Somebody joined\n                  // console.log(json);\n                  const arrayCheck = Array.isArray(json); // console.log(arrayCheck);\n                  // const sfksd = json[\"participants\"];\n                  // console.log(Array.isArray(sfksd));\n\n                  console.log(arrayCheck);\n                  participantsJson.push(json);\n                  console.log(participantsJson);\n                  var filtered = participantsJson.filter(function (el) {\n                    return el.username !== props.name;\n                  });\n                  console.log(filtered);\n                  setjsonFinal(filtered);\n                } else if (what === \"leave\") {\n                  // Somebody left\n                  console.log(participants[username]);\n                  var username = json[\"username\"];\n                  var display = json[\"display\"];\n                  console.log(display);\n                  console.log(json[\"username\"]);\n                  var when = new Date();\n                  $(\"#rp\" + username).remove();\n                  $(\"#chatroom\").append('<p style=\"color: green;\"> <i>' + username + \" left</i></p>\");\n                  $(\"#chatroom\").get(0).scrollTop = $(\"#chatroom\").get(0).scrollHeight;\n                  delete participants[username];\n                }\n              }\n            });\n          },\n          error: function (error) {\n            console.error(error);\n            alert(error);\n          },\n          destroyed: function () {\n            console.log(\"destroyed\");\n          }\n        });\n      }\n    });\n  };\n\n  const checkEnter = (field, event) => {\n    var theCode = event.key;\n\n    if (theCode == \"Enter\") {\n      sendData(data);\n      return false;\n    }\n  };\n\n  function sendData(data) {\n    if (data === \"\") {\n      alert(\"Insert a message to send on the DataChannel\");\n      return;\n    }\n\n    let message = {\n      textroom: \"message\",\n      transaction: Janus.randomString(12),\n      room: myroom,\n      text: data\n    };\n    textroom.data({\n      text: JSON.stringify(message),\n      error: function (reason) {\n        console.log(reason);\n      },\n      success: function () {\n        const handleChange = async () => {\n          const checkIfRoomEntryExists = await axios.get(`http://localhost:3002/chat/${myroom}`, {});\n\n          if (checkIfRoomEntryExists.data.length == 0) {\n            const response = await axios.post(`http://localhost:3002/chat`, {\n              _id: selfID,\n              roomid: myroom,\n              messages: [{\n                name: props.name,\n                message: data,\n                timestamp: getDateString(),\n                _id: selfID\n              }]\n            });\n          } else if (checkIfRoomEntryExists.data[0].roomid == myroom) {\n            const updateTheEntry = await axios.put(`http://localhost:3002/chat/${myroom}`, {\n              name: props.name,\n              message: data,\n              timestamp: getDateString(),\n              _id: selfID\n            });\n          } else {\n            const response = await axios.post(`http://localhost:3002/chat`, {\n              _id: selfID,\n              roomid: myroom,\n              messages: [{\n                name: props.name,\n                message: data,\n                timestamp: getDateString(),\n                _id: selfID\n              }]\n            });\n          } // .then((response) => {\n          // console.log(response);\n          // // const roomcheck = response.data.roomid\n          // })\n          // const roomcheck = checkIfRoomEntryExists.data.data.roomid;\n          // if (roomcheck == myroom) {\n          //   const updateTheEntry = await axios.put(`http://localhost:3002/chat/${myroom}`, {\n          //     name: props.name,\n          //     message: data,\n          //     timestamp: getDateString(),\n          //     _id: selfID,\n          //   });\n          // } else {\n          //   const response = await axios.post(`http://localhost:3002/chat`, {\n          //     _id: selfID,\n          //     roomid: myroom,\n          //     messages: [\n          //       {\n          //         name: props.name,\n          //         message: data,\n          //         timestamp: getDateString(),\n          //         _id: selfID,\n          //       },\n          //     ],\n          //   });\n          // }\n\n\n          console.log(\"Chat history created\");\n        };\n\n        handleChange();\n      }\n    });\n  }\n\n  function getDateString() {\n    var when = new Date();\n    var dateString = (\"0\" + when.getHours()).slice(-2) + \":\" + (\"0\" + when.getMinutes()).slice(-2) + \":\" + (\"0\" + when.getSeconds()).slice(-2) + \":\" + (\"0\" + when.getMilliseconds().toString().slice(-1));\n    return dateString;\n  }\n\n  function escapeXmlTags(value) {\n    if (value) {\n      var escapedValue = value.replace(new RegExp(\"<\", \"g\"), \"&lt\");\n      escapedValue = escapedValue.replace(new RegExp(\">\", \"g\"), \"&gt\");\n      return escapedValue;\n    }\n  }\n\n  const sendUser = (username, event) => {\n    sendPrivateMsg(username);\n  };\n\n  function sendPrivateMsg(username) {\n    console.log(username);\n    var display = username;\n    if (!display) return;\n    const result = prompt(\"Private message to \" + display);\n\n    if (result && result !== \"\") {\n      var message = {\n        textroom: \"message\",\n        transaction: Janus.randomString(12),\n        room: myroom,\n        to: username,\n        text: result\n      };\n      textroom.data({\n        text: JSON.stringify(message),\n        error: function (reason) {\n          console.log(reason);\n        },\n        success: function () {}\n      });\n    }\n\n    return;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-12\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"page-header\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container\",\n          id: \"details\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 425,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container hide\",\n          id: \"roomjoin\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"label label-info\",\n              id: \"you\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 429,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-12\",\n              id: \"controls\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"input-group margin-bottom-md hide\",\n                id: \"registernow\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"input-group-addon\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 435,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"input-group-btn\",\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"btn btn-success\",\n                    onClick: start,\n                    id: \"register\",\n                    children: \"Enter Chat\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 438,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 437,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 431,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container hide\",\n          id: \"room\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-4\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"panel panel-default\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"panel-heading\",\n                  children: /*#__PURE__*/_jsxDEV(\"h4\", {\n                    className: \"panel-title\",\n                    children: [\"Participants List\", /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"label label-info hide\",\n                      id: \"participant\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 457,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 455,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 454,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"panel-body\",\n                  children: /*#__PURE__*/_jsxDEV(\"ul\", {\n                    id: \"list\",\n                    className: \"list-group\",\n                    children: jsonFinal.map((users, i) => {\n                      return /*#__PURE__*/_jsxDEV(\"li\", {\n                        onClick: event => {\n                          sendUser(users.username, event);\n                        },\n                        id: `rp${users.username}`,\n                        className: \"list-group-item\",\n                        children: [\" \", users.username]\n                      }, i, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 467,\n                        columnNumber: 27\n                      }, this);\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 464,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 463,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 453,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 452,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-8\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"panel panel-default\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"panel-heading\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                    className: \"panel-title\",\n                    children: \"Public Chatroom\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 487,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                    children: [\" \", janusDate, \" \"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 488,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 486,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"panel-body relative\",\n                  id: \"chatroom\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 490,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"panel-footer\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"input-group margin-bottom-sm\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"input-group-addon\",\n                      children: /*#__PURE__*/_jsxDEV(\"i\", {\n                        className: \"fa fa-cloud-upload fa-fw\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 494,\n                        columnNumber: 25\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 493,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      className: \"form-control\",\n                      type: \"text\",\n                      placeholder: \"Write a chatroom message\",\n                      autoComplete: \"off\",\n                      id: \"datasend\",\n                      onKeyPress: event => checkEnter(\"datasend\", event),\n                      onChange: onChangeData\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 496,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 492,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 491,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 485,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 484,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 513,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"footer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 420,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Textroom, \"jnZdeIybs1b8yzgckt/6aqCGlDM=\");\n\n_c = Textroom;\n\nvar _c;\n\n$RefreshReg$(_c, \"Textroom\");","map":{"version":3,"sources":["/home/terbo/janusroom/src/components/Textroom.tsx"],"names":["React","useState","Janus","$","axios","server","window","location","hostname","janus","textroom","opaqueId","randomString","myroom","myusername","participants","transactions","Textroom","props","roomIDS","todayDate","Date","janusDate","toString","substring","data","setData","onChangeData","event","currentTarget","value","jsonFinal","setjsonFinal","participantsJson","selfID","setselfID","start","init","debug","callback","isWebrtcSupported","console","log","success","attach","plugin","pluginHandle","getPlugin","getId","session","getSessionId","body","request","send","message","error","iceState","state","mediaState","medium","on","webrtcState","onmessage","msg","jsep","createAnswer","media","audio","video","myid","register","room","transaction","username","name","history","display","text","JSON","stringify","reason","ondataopen","ondata","json","parse","insert","arrayCheck","Array","isArray","push","filtered","filter","el","what","dt","getMilliseconds","replace","RegExp","from","dateString","getDateString","whisper","sender","escapeXmlTags","append","get","scrollTop","scrollHeight","when","remove","alert","destroyed","checkEnter","field","theCode","key","sendData","handleChange","checkIfRoomEntryExists","length","response","post","_id","roomid","messages","timestamp","updateTheEntry","put","getHours","slice","getMinutes","getSeconds","escapedValue","sendUser","sendPrivateMsg","result","prompt","to","map","users","i"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Janus from \"./Janus\";\nimport $, { Callbacks } from \"jquery\";\nimport axios from \"axios\";\nimport bootbox from \"bootbox\";\nvar server: any = null;\n// if (window.location.protocol === \"http:\")\nserver = \"ws://\" + window.location.hostname + \":8188/janus\";\n\n// else server = \"https://\" + window.location.hostname + \":8089/janus\";\n\nvar janus: any = null;\nvar textroom: any = null;\nvar opaqueId: any = \"textroomtest-\" + Janus.randomString(12);\nvar myroom: any = null; // Demo room\n\nvar myusername: any = null;\n// var myid: any = null;\nvar participants: any = {};\nvar transactions: any = {};\n\nexport const Textroom = (props: any) => {\n  myroom = props.roomIDS;\n  var todayDate = new Date();\n  const janusDate = todayDate.toString().substring(4, 16);\n  const [data, setData] = useState<string>(\"\");\n  const onChangeData = (event: React.ChangeEvent<HTMLInputElement>) => {\n    return setData(event.currentTarget.value);\n  };\n  const [jsonFinal, setjsonFinal] = useState<any[]>([]);\n  const participantsJson: any[] = [];\n  const [selfID, setselfID] = useState(\"\");\n\n  const start = () => {\n    Janus.init({\n      debug: \"all\",\n      callback: function () {\n        if (!Janus.isWebrtcSupported()) {\n          console.log(\"No WebRTC support... \");\n          return;\n        }\n        // Create session\n        janus = new Janus({\n          server: server,\n          success: function () {\n            // Attach to TextRoom plugin\n            janus.attach({\n              plugin: \"janus.plugin.textroom\",\n              opaqueId: opaqueId,\n              success: function (pluginHandle: any) {\n                textroom = pluginHandle;\n                console.log(\n                  \"Plugin attached! (\" +\n                    textroom.getPlugin() +\n                    \", id=\" +\n                    textroom.getId() +\n                    \")\"\n                );\n                console.log(textroom.session.getSessionId());\n                console.log(textroom.session);\n                var body = { request: \"setup\" };\n                console.debug(\"Sending message:\", body);\n                textroom.send({ message: body });\n                // Setup the DataChannel\n              },\n              error: function (error: any) {\n                console.error(\" -- Error attaching plugin...\", error);\n              },\n              iceState: function (state: any) {\n                console.log(\"ICE state changed to \" + state);\n              },\n              mediaState: function (medium: any, on: any) {\n                console.log(\n                  \"Janus \" +\n                    (on ? \"started\" : \"stopped\") +\n                    \" receiving our \" +\n                    medium\n                );\n              },\n              webrtcState: function (on: any) {\n                console.log(\n                  \"Janus says our WebRTC PeerConnection is \" +\n                    (on ? \"up\" : \"down\") +\n                    \" now\"\n                );\n              },\n              onmessage: function (msg: any, jsep: any) {\n                console.debug(\" ::: Got a message :::\", msg, jsep);\n                if (msg[\"error\"]) {\n                }\n                if (jsep) {\n                  // Answer\n                  textroom.createAnswer({\n                    jsep: jsep,\n                    media: { audio: false, video: false, data: true }, // We only use datachannels\n                    success: function (jsep: any) {\n                      console.debug(\"Got SDP!\", jsep);\n                      var body = { request: \"ack\" };\n                      textroom.send({\n                        message: body,\n                        jsep: jsep,\n                        success: () => {\n                          const myid = Janus.randomString(12);\n                          setselfID(myid);\n                          const register = {\n                            textroom: \"join\",\n                            room: myroom,\n                            transaction: Janus.randomString(12),\n                            username: props.name,\n                            history: true,\n                            display: myid,\n                          };\n                          textroom.data({\n                            text: JSON.stringify(register),\n                            error: function (reason: any) {\n                              console.log(reason);\n                            },\n                          });\n                        },\n                      });\n                    },\n                    error: function (error: any) {\n                      console.error(\"WebRTC error:\", error);\n                    },\n                  });\n                }\n              },\n              ondataopen: function (data: any) {\n                console.log(\"The DataChannel is available!\");\n                // Prompt for a display name to join the default room\n              },\n\n              ondata: function (data: any) {\n                console.debug(\"We got data from the DataChannel!\", data);\n                var json = JSON.parse(data);\n                const insert = json[\"participants\"];\n                const arrayCheck = Array.isArray(insert);\n                if (arrayCheck) {\n                  participantsJson.push(...insert);\n                }\n                var filtered = participantsJson.filter(function (el: any) {\n                  return el.username !== props.name;\n                });\n                setjsonFinal(filtered);\n                var transaction = json[\"transaction\"];\n                if (transactions[transaction]) {\n                  // S o m e o n e   w a s  w  a  i t i n g f o r  t h i s\n                  transactions[transaction](json);\n                  delete transactions[transaction];\n                  return;\n                }\n                var what = json[\"textroom\"];\n                //var jsonParticipant = json[\"participants\"];\n                //console.log(jsonParticipant);\n                //  participantsJson.push(...jsonParticipant)\n                // if ( jsonParticipant) {\n                //   setparticipantsJson(jsonParticipant);\n                // }\n\n                if (what === \"message\") {\n                  // Incoming message: public or private?\n                  var msg = json[\"text\"];\n                  // const datee = json[\"date\"];\n\n                  var dt = new Date();\n                  const janusDate = dt.toString().substring(4, 16);\n                  console.log(dt.getMilliseconds());\n                  console.log(typeof janusDate);\n                  // console.log(dt.toString().substring(16,25 ))\n                  msg = msg.replace(new RegExp(\"<\", \"g\"), \"&lt\");\n                  msg = msg.replace(new RegExp(\">\", \"g\"), \"&gt\");\n                  var from = json[\"from\"];\n                  console.log(json, \"iran\");\n                  var dateString = getDateString();\n                  // var dateString = getDateString(json[\"date\"]);\n                  console.log(dateString);\n                  var whisper = json[\"whisper\"];\n                  var sender = participants[from]\n                    ? participants[from]\n                    : escapeXmlTags(json[\"display\"]);\n                  console.log(sender);\n\n                  if (whisper === true) {\n                    // Private message\n                    $(\"#chatroom\").append(\n                      '<p style=\"color: purple;\"> <b>[Private Msg :' +\n                        from +\n                        \"]</b> \" +\n                        msg\n                    );\n                    $(\"#chatroom\").get(0)!.scrollTop =\n                      $(\"#chatroom\").get(0)!.scrollHeight;\n                  } else {\n                    // Public message\n                    $(\"#chatroom\").append(\n                      \"<p> <b>\" +\n                        dateString +\n                        \" \" +\n                        \"User-\" +\n                        from +\n                        \": </b> \" +\n                        msg\n                    );\n                    $(\"#chatroom\").get(0)!.scrollTop =\n                      $(\"#chatroom\").get(0)!.scrollHeight;\n                  }\n                } else if (what === \"join\") {\n                  //   // Somebody joined\n\n                  // console.log(json);\n                  const arrayCheck = Array.isArray(json);\n                  // console.log(arrayCheck);\n                  // const sfksd = json[\"participants\"];\n                  // console.log(Array.isArray(sfksd));\n\n                  console.log(arrayCheck);\n\n                  participantsJson.push(json);\n\n                  console.log(participantsJson);\n\n                  var filtered = participantsJson.filter(function (el: any) {\n                    return el.username !== props.name;\n                  });\n\n                  console.log(filtered);\n                  setjsonFinal(filtered);\n                } else if (what === \"leave\") {\n                  // Somebody left\n                  console.log(participants[username]);\n                  var username = json[\"username\"];\n                  var display = json[\"display\"];\n                  console.log(display);\n                  console.log(json[\"username\"]);\n                  var when = new Date();\n                  $(\"#rp\" + username).remove();\n\n                  $(\"#chatroom\")!.append(\n                    '<p style=\"color: green;\"> <i>' + username + \" left</i></p>\"\n                  );\n                  $(\"#chatroom\")!.get(0)!.scrollTop =\n                    $(\"#chatroom\").get(0)!.scrollHeight;\n                  delete participants[username];\n                }\n              },\n            });\n          },\n          error: function (error: any) {\n            console.error(error);\n            alert(error);\n          },\n          destroyed: function () {\n            console.log(\"destroyed\");\n          },\n        });\n      },\n    });\n  };\n\n  const checkEnter = (\n    field: any,\n    event: React.KeyboardEvent<HTMLInputElement>\n  ) => {\n    var theCode = event.key;\n\n    if (theCode == \"Enter\") {\n      sendData(data);\n      return false;\n    }\n  };\n  function sendData(data: any) {\n    if (data === \"\") {\n      alert(\"Insert a message to send on the DataChannel\");\n      return;\n    }\n    let message = {\n      textroom: \"message\",\n      transaction: Janus.randomString(12),\n      room: myroom,\n      text: data,\n    };\n\n    textroom.data({\n      text: JSON.stringify(message),\n      error: function (reason: any) {\n        console.log(reason);\n      },\n      success: function () {\n        const handleChange = async () => {\n          const checkIfRoomEntryExists = await axios.get(\n            `http://localhost:3002/chat/${myroom}`,\n            {}\n          );\n          if (checkIfRoomEntryExists.data.length == 0) {\n            const response = await axios.post(`http://localhost:3002/chat`, {\n              _id: selfID,\n              roomid: myroom,\n              messages: [\n                {\n                  name: props.name,\n                  message: data,\n                  timestamp: getDateString(),\n                  _id: selfID,\n                },\n              ],\n            });\n          } else if (checkIfRoomEntryExists.data[0].roomid == myroom) {\n            const updateTheEntry = await axios.put(\n              `http://localhost:3002/chat/${myroom}`,\n              {\n                name: props.name,\n                message: data,\n                timestamp: getDateString(),\n                _id: selfID,\n              }\n            );\n          } else {\n            const response = await axios.post(`http://localhost:3002/chat`, {\n              _id: selfID,\n              roomid: myroom,\n              messages: [\n                {\n                  name: props.name,\n                  message: data,\n                  timestamp: getDateString(),\n                  _id: selfID,\n                },\n              ],\n            });\n          }\n          // .then((response) => {\n          // console.log(response);\n          // // const roomcheck = response.data.roomid\n          // })\n\n          // const roomcheck = checkIfRoomEntryExists.data.data.roomid;\n\n          // if (roomcheck == myroom) {\n\n          //   const updateTheEntry = await axios.put(`http://localhost:3002/chat/${myroom}`, {\n          //     name: props.name,\n          //     message: data,\n          //     timestamp: getDateString(),\n          //     _id: selfID,\n          //   });\n          // } else {\n          //   const response = await axios.post(`http://localhost:3002/chat`, {\n          //     _id: selfID,\n          //     roomid: myroom,\n          //     messages: [\n          //       {\n          //         name: props.name,\n          //         message: data,\n          //         timestamp: getDateString(),\n          //         _id: selfID,\n          //       },\n          //     ],\n          //   });\n          // }\n          console.log(\"Chat history created\");\n        };\n\n        handleChange();\n      },\n    });\n  }\n  function getDateString() {\n    var when = new Date();\n\n    var dateString =\n      (\"0\" + when.getHours()).slice(-2) +\n      \":\" +\n      (\"0\" + when.getMinutes()).slice(-2) +\n      \":\" +\n      (\"0\" + when.getSeconds()).slice(-2) +\n      \":\" +\n      (\"0\" + when.getMilliseconds().toString().slice(-1));\n    return dateString;\n  }\n  function escapeXmlTags(value: any) {\n    if (value) {\n      var escapedValue = value.replace(new RegExp(\"<\", \"g\"), \"&lt\");\n      escapedValue = escapedValue.replace(new RegExp(\">\", \"g\"), \"&gt\");\n      return escapedValue;\n    }\n  }\n\n  const sendUser = (\n    username: any,\n    event: React.MouseEvent<HTMLLIElement>\n  ): void => {\n    sendPrivateMsg(username);\n  };\n\n  function sendPrivateMsg(username: any) {\n    console.log(username);\n    var display = username;\n    if (!display) return;\n    const result = prompt(\"Private message to \" + display);\n    if (result && result !== \"\") {\n      var message = {\n        textroom: \"message\",\n        transaction: Janus.randomString(12),\n        room: myroom,\n        to: username,\n        text: result,\n      };\n      textroom.data({\n        text: JSON.stringify(message),\n        error: function (reason: any) {\n          console.log(reason);\n        },\n        success: function () {},\n      });\n    }\n    return;\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-md-12\">\n          <div className=\"page-header\"></div>\n          <div className=\"container\" id=\"details\">\n            <div className=\"row\"></div>\n          </div>\n          <div className=\"container hide\" id=\"roomjoin\">\n            <div className=\"row\">\n              <span className=\"label label-info\" id=\"you\" />\n              <div className=\"col-md-12\" id=\"controls\">\n                <div\n                  className=\"input-group margin-bottom-md hide\"\n                  id=\"registernow\"\n                >\n                  <span className=\"input-group-addon\"></span>\n\n                  <span className=\"input-group-btn\">\n                    <button\n                      className=\"btn btn-success\"\n                      onClick={start}\n                      id=\"register\"\n                    >\n                      Enter Chat\n                    </button>\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"container hide\" id=\"room\">\n            <div className=\"row\">\n              <div className=\"col-md-4\">\n                <div className=\"panel panel-default\">\n                  <div className=\"panel-heading\">\n                    <h4 className=\"panel-title\">\n                      Participants List\n                      <span\n                        className=\"label label-info hide\"\n                        id=\"participant\"\n                      />\n                    </h4>\n                  </div>\n                  <div className=\"panel-body\">\n                    <ul id=\"list\" className=\"list-group\">\n                      {jsonFinal.map((users: any, i) => {\n                        return (\n                          <li\n                            key={i}\n                            onClick={(event: any) => {\n                              sendUser(users.username, event);\n                            }}\n                            id={`rp${users.username}`}\n                            className={\"list-group-item\"}\n                          >\n                            {\" \"}\n                            {users.username}\n                          </li>\n                        );\n                      })}\n                    </ul>\n                  </div>\n                </div>\n              </div>\n              <div className=\"col-md-8\">\n                <div className=\"panel panel-default\">\n                  <div className=\"panel-heading\">\n                    <h3 className=\"panel-title\">Public Chatroom</h3>\n                    <h6> {janusDate} </h6>\n                  </div>\n                  <div className=\"panel-body relative\" id=\"chatroom\"></div>\n                  <div className=\"panel-footer\">\n                    <div className=\"input-group margin-bottom-sm\">\n                      <span className=\"input-group-addon\">\n                        <i className=\"fa fa-cloud-upload fa-fw\" />\n                      </span>\n                      <input\n                        className=\"form-control\"\n                        type=\"text\"\n                        placeholder=\"Write a chatroom message\"\n                        autoComplete=\"off\"\n                        id=\"datasend\"\n                        onKeyPress={(event) => checkEnter(\"datasend\", event)}\n                        onChange={onChangeData}\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <hr />\n      <div className=\"footer\"></div>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}